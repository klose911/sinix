!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
$	lib/lib.h	/^    add    $'A', %al$/;"	v
$	lib/lib.h	/^    movb    $'h', %al$/;"	v
$0x7	lib/lib.h	/^    movb    $0x7, %ah$/;"	v
$0xF	lib/lib.h	/^    movb    $0xF, %ah$/;"	v
$0xFF	lib/lib.h	/^    andl    $0xFF, %eax$/;"	v
$0xf	lib/lib.h	/^    mov    $0xf, %ah$/;"	v
$16	boot/include/pm.h	/^    shr     $16, %eax$/;"	v
$16	lib/lib.h	/^    shr     $16, %eax$/;"	v
$160	lib/lib.h	/^    movb    $160, %bl$/;"	v
$2	lib/lib.h	/^    add    $2, %edi$/;"	v
$2	lib/lib.h	/^    addl    $2, %edi$/;"	v
$2	lib/lib.h	/^    mov    $2, %ecx$/;"	v
$24	lib/lib.h	/^    shr     $24, %eax$/;"	v
$4	boot/include/pm.h	/^    shl     $4, %eax$/;"	v
$4	lib/lib.h	/^    addl    $4, %edi$/;"	v
$4	lib/lib.h	/^    addl    $4, %esp$/;"	v
$4	lib/lib.h	/^    shrb   $4, %al$/;"	v
$8	lib/lib.h	/^    shr     $8, %eax$/;"	v
$9	lib/lib.h	/^    cmp    $9, %al$/;"	v
BOOTBIN	Makefile	/^BOOTBIN= boot\/boot.bin boot\/loader.bin$/;"	m
BootMessage	boot/boot.S	/^BootMessage:        .ascii    "Booting**"        \/* index 0 *\/$/;"	l
CBFLAGS	Makefile	/^CBFLAGS= -g -I boot\/include\/ -c $/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CKFLAGS	Makefile	/^CKFLAGS=-g -I include\/ -c -fno-builtin$/;"	m
DA_32	include/protect.h	92;"	d
DA_386CGate	include/protect.h	112;"	d
DA_386IGate	include/protect.h	113;"	d
DA_386TGate	include/protect.h	114;"	d
DA_386TSS	include/protect.h	111;"	d
DA_C	include/protect.h	103;"	d
DA_CCO	include/protect.h	105;"	d
DA_CCOR	include/protect.h	106;"	d
DA_CR	include/protect.h	104;"	d
DA_DPL0	include/protect.h	94;"	d
DA_DPL1	include/protect.h	95;"	d
DA_DPL2	include/protect.h	96;"	d
DA_DPL3	include/protect.h	97;"	d
DA_DR	include/protect.h	100;"	d
DA_DRW	include/protect.h	101;"	d
DA_DRWA	include/protect.h	102;"	d
DA_LDT	include/protect.h	109;"	d
DA_LIMIT_4K	include/protect.h	93;"	d
DA_TaskGate	include/protect.h	110;"	d
DESCRIPTOR	include/protect.h	/^} DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
DispAL	boot/loader.S	/^DispAL:$/;"	l
DispAddrMap	boot/loader.S	/^DispAddrMap:$/;"	l
DispInt	boot/loader.S	/^DispInt:$/;"	l
DispLF	boot/loader.S	/^DispLF:$/;"	l
DispStr	boot/boot.S	/^DispStr: $/;"	l
DispStr	boot/loader.S	/^DispStr:$/;"	l
DispStrRealMode	boot/loader.S	/^DispStrRealMode: $/;"	l
EXTERN	include/const.h	5;"	d
EXTERN	include/global.h	6;"	d
EXTERN	include/global.h	7;"	d
FALSE	include/const.h	9;"	d
GATE	include/protect.h	/^} GATE; $/;"	t	typeref:struct:s_gate
GDT_SIZE	include/const.h	12;"	d
GLOBAL_VARIABLES_HERE	kernel/global.c	1;"	d	file:
GdtPtr	boot/loader.S	/^GdtPtr: .2byte  (GdtLen - 1)  \/* GDT Limit *\/$/;"	l
GetFATEntry	boot/boot.S	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.S	/^GetFATEntry:$/;"	l
GoOnReading	boot/boot.S	/^GoOnReading:$/;"	l
GoOnReading	boot/loader.S	/^GoOnReading:$/;"	l
IDT_SIZE	include/const.h	13;"	d
INDEX_DUMMY	include/protect.h	56;"	d
INDEX_FLAT_C	include/protect.h	57;"	d
INDEX_FLAT_RW	include/protect.h	58;"	d
INDEX_LDT_FIRST	include/protect.h	61;"	d
INDEX_TSS	include/protect.h	60;"	d
INDEX_VIDEO	include/protect.h	59;"	d
INT_M_CTL	include/const.h	26;"	d
INT_M_CTLMASK	include/const.h	27;"	d
INT_S_CTL	include/const.h	28;"	d
INT_S_CTLMASK	include/const.h	29;"	d
INT_VECTOR_BOUNDS	include/protect.h	122;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	120;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	132;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	124;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	126;"	d
INT_VECTOR_DEBUG	include/protect.h	118;"	d
INT_VECTOR_DIVIDE	include/protect.h	117;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	125;"	d
INT_VECTOR_INVAL_OP	include/protect.h	123;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	127;"	d
INT_VECTOR_IRQ0	include/protect.h	135;"	d
INT_VECTOR_IRQ8	include/protect.h	136;"	d
INT_VECTOR_NMI	include/protect.h	119;"	d
INT_VECTOR_OVERFLOW	include/protect.h	121;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	131;"	d
INT_VECTOR_PROTECTION	include/protect.h	130;"	d
INT_VECTOR_SEG_NOT	include/protect.h	128;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	129;"	d
InitKernel	boot/loader.S	/^InitKernel: $/;"	l
KERNELBIN	Makefile	/^KERNELBIN= kernel.bin$/;"	m
KERNELOBJS	Makefile	/^KERNELOBJS= kernel\/kernel.o kernel\/start.o kernel\/main.o\\$/;"	m
KernelFileName	boot/loader.S	/^KernelFileName:     .asciz  "KERNEL  BIN"        \/* File name *\/$/;"	l
KillMoter	boot/loader.S	/^KillMoter: $/;"	l
LABEL_CMP_FILENAME	boot/boot.S	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.S	/^LABEL_CMP_FILENAME: $/;"	l
LABEL_DATA	boot/loader.S	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.S	/^LABEL_DESC_FLAT_C:  Descriptor        0,            0xfffff, (DA_CR|DA_32|DA_LIMIT_4K)$/;"	l
LABEL_DESC_FLAT_RW	boot/loader.S	/^LABEL_DESC_FLAT_RW: Descriptor        0,            0xfffff, (DA_DRW|DA_32|DA_LIMIT_4K)$/;"	l
LABEL_DESC_VIDEO	boot/loader.S	/^LABEL_DESC_VIDEO:   Descriptor  0xB8000,             0xffff, (DA_DRW | DA_DPL3)$/;"	l
LABEL_DIFFERENT	boot/boot.S	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.S	/^LABEL_DIFFERENT: $/;"	l
LABEL_EVEN	boot/boot.S	/^LABEL_EVEN:$/;"	l
LABEL_EVEN	boot/loader.S	/^LABEL_EVEN:$/;"	l
LABEL_EVEN_2	boot/boot.S	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.S	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.S	/^LABEL_FILENAME_FOUND:$/;"	l
LABEL_FILENAME_FOUND	boot/loader.S	/^LABEL_FILENAME_FOUND: $/;"	l
LABEL_FILE_LOADED	boot/boot.S	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.S	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/loader.S	/^LABEL_GDT:          Descriptor        0,                  0, 0$/;"	l
LABEL_GET_FAT_ENTRY_OK	boot/boot.S	/^LABEL_GET_FAT_ENTRY_OK:$/;"	l
LABEL_GET_FAT_ENTRY_OK	boot/loader.S	/^LABEL_GET_FAT_ENTRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.S	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.S	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.S	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.S	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR: $/;"	l
LABEL_GO_ON	boot/boot.S	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.S	/^LABEL_GO_ON: $/;"	l
LABEL_NO_KERNELBIN	boot/loader.S	/^LABEL_NO_KERNELBIN: $/;"	l
LABEL_NO_LOADERBIN	boot/boot.S	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.S	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.S	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.S	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.S	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.S	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN: $/;"	l
LABEL_STACK	boot/loader.S	/^LABEL_STACK:$/;"	l
LABEL_START	boot/boot.S	/^LABEL_START:$/;"	l
LABEL_START	boot/loader.S	/^LABEL_START: $/;"	l
LD	Makefile	/^LD=ld$/;"	m
LDFILE_BOOT	Makefile	/^LDFILE_BOOT=boot\/solrex_x86_boot.ld$/;"	m
LDFILE_DOS	Makefile	/^LDFILE_DOS=boot\/solrex_x86_dos.ld$/;"	m
LDFILE_KERNEL	Makefile	/^LDFILE_KERNEL=kernel\/solrex_x86_kernel.ld$/;"	m
LDFLAGS_BOOT	Makefile	/^LDFLAGS_BOOT=-T$(LDFILE_BOOT)$/;"	m
LDFLAGS_DOS	Makefile	/^LDFLAGS_DOS=-T$(LDFILE_DOS)$/;"	m
LDFLAGS_KERNEL	Makefile	/^LDFLAGS_KERNEL=-s -T$(LDFILE_KERNEL)$/;"	m
LDT_SIZE	include/protect.h	73;"	d
Limit	boot/include/pm.h	/^.macro Descriptor Base, Limit, Attr$/;"	v
LoadMessage	boot/loader.S	/^LoadMessage:        .ascii    "Loading**"        \/* index 0 *\/$/;"	l
LoaderFileName	boot/boot.S	/^LoaderFileName:     .asciz  "LOADER  BIN"        \/* File name *\/$/;"	l
MemCpy	boot/loader.S	/^MemCpy:$/;"	l
Message1	boot/boot.S	/^Message1:           .ascii    "Loaded in"        \/* index 1 *\/$/;"	l
Message1	boot/loader.S	/^Message1:           .ascii    "Loaded in"        \/* index 1 *\/$/;"	l
Message2	boot/boot.S	/^Message2:           .ascii    "No LOADER"        \/* index 2 *\/$/;"	l
Message2	boot/loader.S	/^Message2:           .ascii    "No KERNEL"        \/* index 2 *\/$/;"	l
NR_TASKS	include/proc.h	33;"	d
OBJCOPY	Makefile	/^OBJCOPY=objcopy$/;"	m
Offset	boot/include/pm.h	/^.macro Gate  Selector, Offset, PCount, Attr$/;"	v
PCount	boot/include/pm.h	/^.macro Gate  Selector, Offset, PCount, Attr$/;"	v
PRIVATE	include/const.h	6;"	d
PRIVILEGE_KRNL	include/const.h	16;"	d
PRIVILEGE_TASK	include/const.h	17;"	d
PRIVILEGE_USER	include/const.h	18;"	d
PROCESS	include/proc.h	/^} PROCESS; $/;"	t	typeref:struct:s_proc
PUBLIC	include/const.h	4;"	d
RPL_KRNL	include/const.h	21;"	d
RPL_TASK	include/const.h	22;"	d
RPL_USER	include/const.h	23;"	d
ReadSector	boot/boot.S	/^ReadSector:$/;"	l
ReadSector	boot/loader.S	/^ReadSector:$/;"	l
SA_RPL0	include/protect.h	82;"	d
SA_RPL1	include/protect.h	83;"	d
SA_RPL2	include/protect.h	84;"	d
SA_RPL3	include/protect.h	85;"	d
SA_RPL_MASK	include/protect.h	81;"	d
SA_TIG	include/protect.h	88;"	d
SA_TIL	include/protect.h	89;"	d
SA_TI_MASK	include/protect.h	87;"	d
SELECTOR_DUMMY	include/protect.h	64;"	d
SELECTOR_FLAT_C	include/protect.h	65;"	d
SELECTOR_FLAT_RW	include/protect.h	66;"	d
SELECTOR_KERNEL_CS	include/protect.h	76;"	d
SELECTOR_KERNEL_DS	include/protect.h	77;"	d
SELECTOR_KERNEL_GS	include/protect.h	78;"	d
SELECTOR_LDT_FIRST	include/protect.h	69;"	d
SELECTOR_TSS	include/protect.h	68;"	d
SELECTOR_VIDEO	include/protect.h	67;"	d
STACK_FRAME	include/proc.h	/^} STACK_FRAME; $/;"	t	typeref:struct:s_stackframe
STACK_SIZE_TESTA	include/proc.h	36;"	d
STACK_SIZE_TOTAL	include/proc.h	38;"	d
SetupPaging	boot/loader.S	/^SetupPaging:$/;"	l
StackSpace	kernel/kernel.S	/^StackSpace: $/;"	l
StackTop	kernel/kernel.S	/^StackTop:$/;"	l
TRIM_FLAGS	Makefile	/^TRIM_FLAGS=-R .pdr -R .comment -R.note -S -O binary$/;"	m
TRUE	include/const.h	8;"	d
TSS	include/protect.h	/^}TSS;$/;"	t	typeref:struct:s_tss
_AMECount	boot/loader.S	/^	_AMECount:      .4byte 0        \/* Address Map Entry Counter *\/$/;"	l
_ARDSTitle	boot/loader.S	/^	_ARDSTitle:     .ascii "BaseAddrLo BaseAddrHi LengthLo LengthHi   Type\\n\\0"$/;"	l
_ARDStruct	boot/loader.S	/^	_ARDStruct:                     \/* Address Range Descriptor Structure *\/$/;"	l
_AddrMapBuf	boot/loader.S	/^	_AddrMapBuf:  .space 256, 0      \/* Address map buffer *\/$/;"	l
_BaseAddrHigh	boot/loader.S	/^	  _BaseAddrHigh:    .4byte 0    \/* High 32 bits of base address *\/$/;"	l
_BaseAddrLow	boot/loader.S	/^	  _BaseAddrLow:     .4byte 0    \/* Low 32 bits of base address *\/$/;"	l
_CursorPos	boot/loader.S	/^	_CursorPos:     .4byte (80*10+0)*2  \/* Screen Cursor position for printing *\/$/;"	l
_LFMes	boot/loader.S	/^	_LFMes:         .ascii "\\n\\0"   \/* Line Feed Message(New line) *\/$/;"	l
_LengthHigh	boot/loader.S	/^	  _LengthHigh:      .4byte 0    \/* High 32 bits of length in bytes *\/$/;"	l
_LengthLow	boot/loader.S	/^	  _LengthLow:       .4byte 0    \/* Low 32 bits of length in bytes *\/$/;"	l
_MemSize	boot/loader.S	/^	_MemSize:       .4byte 0        \/* Usable Memory Size *\/$/;"	l
_PMMessage	boot/loader.S	/^	_PMMessage:     .ascii "Welcome to protect mode! ^-^\\n\\0"$/;"	l
_RAMSizeMes	boot/loader.S	/^	_RAMSizeMes:    .ascii "RAM Size:\\0"$/;"	l
_Type	boot/loader.S	/^	  _Type:            .4byte 0    \/* Address type of this range: 0, 1, other *\/$/;"	l
_WUNIX_CONST_H	include/const.h	2;"	d
_WUNIX_GLOBAL_H	include/global.h	2;"	d
_WUNIX_PROC_H	include/proc.h	2;"	d
_WUNIX_PROTECT_H	include/protect.h	2;"	d
_WUNIX_PROTO_H	include/proto.h	2;"	d
_WUNIX_STRING_H	include/string.h	2;"	d
_WUNIX_TYPE_H	include/type.h	2;"	d
_start	kernel/kernel.S	/^_start: $/;"	l
ah	boot/include/pm.h	/^    movb    %ah, (\\SegDesc + 7)$/;"	v
al	boot/include/pm.h	/^    movb    %al, (\\SegDesc + 4)$/;"	v
al	lib/lib.h	/^    mov    %al, %dl$/;"	v
al	lib/lib.h	/^    movb    %al, %es:(%edi)$/;"	v
attr	include/protect.h	/^    u8  attr; $/;"	m	struct:s_gate
attr1	include/protect.h	/^	u8  attr1; $/;"	m	struct:s_descriptor
ax	boot/include/pm.h	/^    movw    %ax, (\\SegDesc + 2)$/;"	v
ax	lib/lib.h	/^    movw    %ax, %gs:(%edi)$/;"	v
bOdd	boot/boot.S	/^bOdd:                   .byte   0       \/* odd or even? *\/$/;"	l
bOdd	boot/loader.S	/^bOdd:                   .byte   0       \/* odd or even? *\/$/;"	l
backlink	include/protect.h	/^	u32 backlink; $/;"	m	struct:s_tss
base_high	include/protect.h	/^	u8  base_high;$/;"	m	struct:s_descriptor
base_low	include/protect.h	/^	u16 base_low; $/;"	m	struct:s_descriptor
base_mid	include/protect.h	/^	u8  base_mid; $/;"	m	struct:s_descriptor
bounds_check	kernel/kernel.S	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.S	/^breakpoint_exception:$/;"	l
copr_error	kernel/kernel.S	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.S	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.S	/^copr_seg_overrun:$/;"	l
cr3	include/protect.h	/^	u32 cr3;$/;"	m	struct:s_tss
cs	boot/include/pm.h	/^    mov     %cs, %ax$/;"	v
cs	include/proc.h	/^	u32 cs;$/;"	m	struct:s_stackframe
cs	include/protect.h	/^	u32 cs;$/;"	m	struct:s_tss
csinit	kernel/kernel.S	/^csinit: $/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f
delay	lib/klib.c	/^PUBLIC void delay(int time) $/;"	f
disp_color_str	lib/klib.S	/^disp_color_str:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int input)$/;"	f
disp_pos	include/global.h	/^EXTERN int disp_pos;$/;"	v
disp_str	lib/klib.S	/^disp_str:$/;"	l
divide_error	kernel/kernel.S	/^divide_error: $/;"	l
dl	lib/lib.h	/^    mov    %dl, %al$/;"	v
double_fault	kernel/kernel.S	/^double_fault:$/;"	l
ds	include/proc.h	/^	u32 ds; $/;"	m	struct:s_stackframe
ds	include/protect.h	/^	u32 ds;$/;"	m	struct:s_tss
dwKernelSize	boot/loader.S	/^dwKernelSize:           .4byte  0 $/;"	l
eax	boot/include/pm.h	/^    xor     %eax, %eax$/;"	v
eax	include/proc.h	/^	u32 eax;$/;"	m	struct:s_stackframe
eax	include/protect.h	/^	u32 eax;$/;"	m	struct:s_tss
eax	lib/lib.h	/^    movl    %eax, %edi$/;"	v
ebp	include/proc.h	/^	u32 ebp;$/;"	m	struct:s_stackframe
ebp	include/protect.h	/^	u32 ebp;$/;"	m	struct:s_tss
ebp	lib/lib.h	/^    mov     %ebp, %esp$/;"	v
ebx	include/proc.h	/^	u32 ebx;$/;"	m	struct:s_stackframe
ebx	include/protect.h	/^	u32 ebx;$/;"	m	struct:s_tss
ecx	include/proc.h	/^	u32 ecx;$/;"	m	struct:s_stackframe
ecx	include/protect.h	/^	u32 ecx;$/;"	m	struct:s_tss
edi	include/proc.h	/^	u32 edi; $/;"	m	struct:s_stackframe
edi	include/protect.h	/^	u32 edi;$/;"	m	struct:s_tss
edi	lib/lib.h	/^    movl    %edi, (CursorPos)$/;"	v
edx	include/proc.h	/^	u32 edx;$/;"	m	struct:s_stackframe
edx	include/protect.h	/^	u32 edx;$/;"	m	struct:s_tss
eflags	include/proc.h	/^	u32 eflags; $/;"	m	struct:s_stackframe
eflags	include/protect.h	/^	u32 eflags;$/;"	m	struct:s_tss
eip	include/proc.h	/^	u32 eip;$/;"	m	struct:s_stackframe
eip	include/protect.h	/^	u32 eip;$/;"	m	struct:s_tss
es	include/proc.h	/^	u32 es;$/;"	m	struct:s_stackframe
es	include/protect.h	/^	u32 es;$/;"	m	struct:s_tss
esi	include/proc.h	/^	u32 esi;$/;"	m	struct:s_stackframe
esi	include/protect.h	/^	u32 esi;$/;"	m	struct:s_tss
esp	include/proc.h	/^	u32 esp;$/;"	m	struct:s_stackframe
esp	include/protect.h	/^	u32 esp;$/;"	m	struct:s_tss
esp	lib/lib.h	/^    mov     %esp, %ebp$/;"	v
esp	lib/lib.h	/^    movl    %esp, %ebp$/;"	v
esp0	include/protect.h	/^	u32 esp0; $/;"	m	struct:s_tss
esp1	include/protect.h	/^	u32 esp1; $/;"	m	struct:s_tss
esp2	include/protect.h	/^	u32 esp2; $/;"	m	struct:s_tss
exception	kernel/kernel.S	/^exception: $/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no, int err_code, $/;"	f
fs	include/proc.h	/^	u32 fs; $/;"	m	struct:s_stackframe
fs	include/protect.h	/^	u32 fs;$/;"	m	struct:s_tss
gdt	include/global.h	/^EXTERN DESCRIPTOR gdt[GDT_SIZE];$/;"	v
gdt_ptr	include/global.h	/^EXTERN u8 gdt_ptr[6];$/;"	v
general_protection	kernel/kernel.S	/^general_protection:$/;"	l
gs	include/proc.h	/^	u32 gs; $/;"	m	struct:s_stackframe
gs	include/protect.h	/^	u32 gs;$/;"	m	struct:s_tss
hwint00	kernel/kernel.S	/^hwint00: $/;"	l
hwint01	kernel/kernel.S	/^hwint01: $/;"	l
hwint02	kernel/kernel.S	/^hwint02: $/;"	l
hwint03	kernel/kernel.S	/^hwint03: $/;"	l
hwint04	kernel/kernel.S	/^hwint04: $/;"	l
hwint05	kernel/kernel.S	/^hwint05: $/;"	l
hwint06	kernel/kernel.S	/^hwint06: $/;"	l
hwint07	kernel/kernel.S	/^hwint07: $/;"	l
hwint08	kernel/kernel.S	/^hwint08: $/;"	l
hwint09	kernel/kernel.S	/^hwint09: $/;"	l
hwint10	kernel/kernel.S	/^hwint10: $/;"	l
hwint11	kernel/kernel.S	/^hwint11: $/;"	l
hwint12	kernel/kernel.S	/^hwint12: $/;"	l
hwint13	kernel/kernel.S	/^hwint13: $/;"	l
hwint14	kernel/kernel.S	/^hwint14: $/;"	l
hwint15	kernel/kernel.S	/^hwint15: $/;"	l
idt	include/global.h	/^EXTERN GATE idt[IDT_SIZE];$/;"	v
idt_ptr	include/global.h	/^EXTERN u8 idt_ptr[6];$/;"	v
in_byte	lib/klib.S	/^in_byte: $/;"	l
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A(void) $/;"	f
init_descriptor	kernel/protect.c	/^PRIVATE void init_descriptor(DESCRIPTOR *p_desc, $/;"	f
init_idt_desc	kernel/protect.c	/^PRIVATE void init_idt_desc($/;"	f
init_protect	kernel/protect.c	/^PUBLIC void init_protect() $/;"	f
int_handler	include/type.h	/^typedef void (*int_handler) ();$/;"	t
inval_opcode	kernel/kernel.S	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.S	/^inval_tss:$/;"	l
iobase	include/protect.h	/^	u16 iobase;$/;"	m	struct:s_tss
itoa	lib/klib.c	/^PUBLIC char * itoa(char * str, int num)$/;"	f
jb	boot/loader.S	/^    jb      DMS.2                \/*       MemSize = BaseAddrLow + LengthLow; *\/$/;"	d
jne	boot/loader.S	/^    jne     DMS.2$/;"	d
jnz	boot/loader.S	/^    jnz     DMS.1                \/*   } while(j != 0);                       *\/$/;"	d
kernel_esp	include/proc.h	/^	u32 kernel_esp;$/;"	m	struct:s_stackframe
kernel_main	kernel/main.c	/^PUBLIC int kernel_main(void) $/;"	f
ldt	include/protect.h	/^	u32 ldt; $/;"	m	struct:s_tss
ldt_sel	include/proc.h	/^	u16 ldt_sel; $/;"	m	struct:s_proc
ldts	include/proc.h	/^	DESCRIPTOR ldts[LDT_SIZE]; $/;"	m	struct:s_proc
limit_high_attr2	include/protect.h	/^	u8  limit_high_attr2; $/;"	m	struct:s_descriptor
limit_low	include/protect.h	/^	u16 limit_low; $/;"	m	struct:s_descriptor
memcpy	lib/string.S	/^memcpy:$/;"	l
memset	lib/string.S	/^memset:$/;"	l
nmi	kernel/kernel.S	/^nmi:$/;"	l
offset_high	include/protect.h	/^	u16 offset_high; $/;"	m	struct:s_gate
offset_low	include/protect.h	/^    u16 offset_low; $/;"	m	struct:s_gate
out_byte	lib/klib.S	/^out_byte: $/;"	l
overflow	kernel/kernel.S	/^overflow:$/;"	l
p_count	include/protect.h	/^	u8  p_count;$/;"	m	struct:s_gate
p_name	include/proc.h	/^	char p_name[16];$/;"	m	struct:s_proc
p_proc_ready	include/global.h	/^EXTERN PROCESS* p_proc_ready;$/;"	v
page_fault	kernel/kernel.S	/^page_fault:$/;"	l
pid	include/proc.h	/^	u32 pid; $/;"	m	struct:s_proc
proc_table	kernel/global.c	/^PUBLIC PROCESS proc_table[NR_TASKS]; $/;"	v
regs	include/proc.h	/^	STACK_FRAME regs; $/;"	m	struct:s_proc
restart	kernel/kernel.S	/^restart: $/;"	l
ret_addr	include/proc.h	/^	u32 ret_addr;$/;"	m	struct:s_stackframe
s_descriptor	include/protect.h	/^typedef struct s_descriptor $/;"	s
s_gate	include/protect.h	/^typedef struct s_gate $/;"	s
s_proc	include/proc.h	/^typedef struct s_proc {$/;"	s
s_stackframe	include/proc.h	/^typedef struct  s_stackframe {$/;"	s
s_tss	include/protect.h	/^typedef struct s_tss {$/;"	s
seg2phys	kernel/protect.c	/^PUBLIC u32 seg2phys(u16 seg) $/;"	f
segment_not_present	kernel/kernel.S	/^segment_not_present:$/;"	l
selector	include/protect.h	/^	u16 selector; $/;"	m	struct:s_gate
single_step_exception	kernel/kernel.S	/^single_step_exception:$/;"	l
spurius_irq	kernel/i8259.c	/^PUBLIC void spurius_irq(int irq) $/;"	f
ss	include/proc.h	/^	u32 ss;	$/;"	m	struct:s_stackframe
ss	include/protect.h	/^	u32 ss;$/;"	m	struct:s_tss
ss0	include/protect.h	/^	u32 ss0; $/;"	m	struct:s_tss
ss1	include/protect.h	/^	u32 ss1; $/;"	m	struct:s_tss
ss2	include/protect.h	/^	u32 ss2; $/;"	m	struct:s_tss
stack_exception	kernel/kernel.S	/^stack_exception:$/;"	l
task_stack	kernel/global.c	/^PUBLIC char task_stack[STACK_SIZE_TOTAL];$/;"	v
testA	kernel/main.c	/^void testA(void) $/;"	f
trap	include/protect.h	/^	u16 trap; $/;"	m	struct:s_tss
tss	include/global.h	/^EXTERN TSS tss; $/;"	v
u16	include/type.h	/^typedef unsigned short u16;$/;"	t
u32	include/type.h	/^typedef unsigned int u32;$/;"	t
u8	include/type.h	/^typedef unsigned char u8;$/;"	t
vir2phys	include/protect.h	139;"	d
wRootDirSizeForLoop	boot/boot.S	/^wRootDirSizeForLoop:    .2byte  RootDirSectors$/;"	l
wRootDirSizeForLoop	boot/loader.S	/^wRootDirSizeForLoop:    .2byte  RootDirSectors$/;"	l
wSectorNo	boot/boot.S	/^wSectorNo:              .2byte  0       \/* Sector number to read *\/$/;"	l
wSectorNo	boot/loader.S	/^wSectorNo:              .2byte  0       \/* Sector number to read *\/$/;"	l
